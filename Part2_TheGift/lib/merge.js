// Generated by CoffeeScript 1.10.0
(function() {
  var cell, cellid, data, defaults, err, error, fs, i, id, infile, j, len, mustache, outdir, outfile, outfilename, r, readrow, sheet, template, templates, workbook, xlsx;

  if (process.argv.length < 3) {
    console.log('Usage: node merge <xlsx-file> [ <participant> ... ]');
    process.exit(-1);
  }

  xlsx = require('xlsx');

  fs = require('fs');

  mustache = require('mustache');

  console.log('read defaults.json');

  defaults = JSON.parse(fs.readFileSync('defaults.json', {
    encoding: 'utf8'
  }));

  infile = process.argv[2];

  console.log('read spreadsheet ' + infile);

  workbook = xlsx.readFile(infile);

  sheet = workbook.Sheets[workbook.SheetNames[0]];

  cellid = function(c, r) {
    var p, rec;
    p = String(r + 1);
    rec = function(c) {
      p = (String.fromCharCode('A'.charCodeAt(0) + (c % 26))) + p;
      c = Math.floor(c / 26);
      if (c !== 0) {
        return rec(c - 1);
      }
    };
    rec(c);
    return p;
  };

  console.log('AA1 = ' + cellid(26, 0) + ' ' + (JSON.stringify(sheet[cellid(26, 0)])));

  templates = fs.readdirSync('templates');

  readrow = function(r) {
    var c, data, head, i, k, m, ref, ref1, ref2, ref3, ref4, ref5, track, v, val;
    track = 'Track0';
    data = {};
    data.id = (ref = sheet[cellid(0, r)]) != null ? ref.v : void 0;
    for (c = i = 1; i <= 1000; c = ++i) {
      head = (ref1 = sheet[cellid(c, 0)]) != null ? (ref2 = ref1.v) != null ? ref2.toLowerCase() : void 0 : void 0;
      if (head == null) {
        break;
      }
      m = head.match(/^((answer|track)[1-6])$/);
      if (m != null) {
        track = m[1];
      }
      if (data[track] === void 0) {
        data[track] = {};
        ref3 = defaults[m[2]];
        for (k in ref3) {
          v = ref3[k];
          data[track][k] = v;
        }
      }
      val = (ref4 = sheet[cellid(c, r)]) != null ? ref4.v : void 0;
      if (val != null) {
        data[track][head] = (ref5 = sheet[cellid(c, r)]) != null ? ref5.v : void 0;
      }
    }
    return data;
  };

  for (r = i = 1; i <= 1000; r = ++i) {
    cell = sheet[cellid(0, r)];
    if (cell === void 0) {
      break;
    }
    id = cell.v;
    if (id == null) {
      continue;
    }
    if (process.argv.length < 4 || (process.argv.indexOf(id)) >= 0) {
      data = readrow(r);
      console.log('Read participant ' + id + ': ' + (JSON.stringify(data)));
      outdir = 'output/' + id;
      try {
        fs.statSync(outdir);
      } catch (error) {
        err = error;
        console.log('Create output directory ' + outdir);
        fs.mkdirSync(outdir);
      }
      for (j = 0, len = templates.length; j < len; j++) {
        template = templates[j];
        infile = fs.readFileSync('templates/' + template, {
          encoding: 'utf8'
        });
        outfilename = outdir + '/' + (template.replace('PARTICIPANT', id));
        console.log('Generate ' + outfilename);
        outfile = mustache.render(infile, data);
        fs.writeFileSync(outfilename, outfile, {
          encoding: 'utf8'
        });
        if (outfilename.indexOf('.json' >= 0)) {
          JSON.parse(outfile);
        }
      }
    }
  }

}).call(this);
