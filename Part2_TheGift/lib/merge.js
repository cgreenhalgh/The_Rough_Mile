// Generated by CoffeeScript 1.10.0
(function() {
  var cell, cellid, data, err, error, fs, i, id, infile, j, len, mustache, outdir, outfile, outfilename, r, readrow, sheet, template, templates, workbook, xlsx;

  if (process.argv.length < 3) {
    console.log('Usage: node merge <xlsx-file> [ <participant> ... ]');
    process.exit(-1);
  }

  xlsx = require('xlsx');

  fs = require('fs');

  mustache = require('mustache');

  infile = process.argv[2];

  console.log('read spreadsheet ' + infile);

  workbook = xlsx.readFile(infile);

  sheet = workbook.Sheets[workbook.SheetNames[0]];

  cellid = function(c, r) {
    var p, rec;
    p = String(r + 1);
    rec = function(c) {
      p = (String.fromCharCode('A'.charCodeAt(0) + (c % 26))) + p;
      c = Math.floor(c / 26);
      if (c !== 0) {
        return rec(c);
      }
    };
    rec(c);
    return p;
  };

  templates = fs.readdirSync('templates');

  readrow = function(r) {
    var c, data, head, i, m, ref, ref1, ref2, track;
    track = 'Track0';
    data = {};
    data.id = (ref = sheet[cellid(0, r)]) != null ? ref.v : void 0;
    for (c = i = 1; i <= 1000; c = ++i) {
      head = (ref1 = sheet[cellid(c, 0)]) != null ? ref1.v : void 0;
      if (head == null) {
        break;
      }
      m = head.match(/^((Answer|Track)[1-6])$/);
      if (m != null) {
        track = m[1];
      }
      if (data[track] === void 0) {
        data[track] = {};
      }
      data[track][head] = (ref2 = sheet[cellid(c, r)]) != null ? ref2.v : void 0;
    }
    return data;
  };

  for (r = i = 1; i <= 1000; r = ++i) {
    cell = sheet[cellid(0, r)];
    if (cell === void 0) {
      break;
    }
    id = cell.v;
    if (id == null) {
      continue;
    }
    if (process.argv.length < 4 || (process.argv.indexOf(id)) >= 0) {
      data = readrow(r);
      console.log('Read participant ' + id + ': ' + (JSON.stringify(data)));
      outdir = 'output/' + id;
      try {
        fs.statSync(outdir);
      } catch (error) {
        err = error;
        console.log('Create output directory ' + outdir);
        fs.mkdirSync(outdir);
      }
      for (j = 0, len = templates.length; j < len; j++) {
        template = templates[j];
        infile = fs.readFileSync('templates/' + template, {
          encoding: 'utf8'
        });
        outfilename = outdir + '/' + (template.replace('PARTICIPANT', id));
        console.log('Generate ' + outfilename);
        outfile = mustache.render(infile, data);
        fs.writeFileSync(outfilename, outfile, {
          encoding: 'utf8'
        });
      }
    }
  }

}).call(this);
